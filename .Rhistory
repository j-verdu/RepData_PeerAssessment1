cube <- function (x,n) {}
cube <- function (x,n) {x^3}
cube(3)
x<-1:10
if (x>5){x<-0}
if (x>0){x<-40}
x
if (x>10){x<-40}
x<-1:10
if (x>10){x<-40}
x
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
clean89
clean()
clean
new
quit
exit
quit()
0.225/(0.225+(0.48*0.7))
?qnorm
qnorm(0.95,1100,75)
1.645*75
1.645*75+1100
1100+qt(0.95,99)*(75/sqrt(99))
choose(5,4)*0.5^5+0.5^5
pbinom(3,size=5,prob=.5,lower.tail=FALSE)
qt(0.975,99)*(10/sqrt(100))
qt(0.84,99)*(10/sqrt(100))
qt(0.975,999)*(sqrt(1/12)/sqrt(1000))
(sqrt(1/12)/sqrt(1000))
(sqrt(1/12)/sqrt(100))
ppois(10,lambda=5*3)
ppois(15,lambda=5*3)
ppois(15,lambda=5*3)
choose(9,3)
setwd("D:/jan/Dropbox/data_sci/b/RepData_PeerAssessment1")
source('D:/jan/Dropbox/data_sci/ReproducibleResearch/Project1.R')
source('D:/jan/Dropbox/data_sci/ReproducibleResearch/Project1.R')
source('D:/jan/Dropbox/data_sci/ReproducibleResearch/Project1.R')
#1
unzip("activity.zip")
data<-read.csv("activity.csv", sep=",",na.strings="NA",stringsAsFactors=FALSE)
#create daily data
days<-levels(factor(data$date))
steps<-rep (0, length(days))
for (i in seq_along(days)){
steps[i]<-sum(data$steps[data$date==days[i]])
}
dailydata<-data.frame(days,steps)
# create data for average day
int<-as.integer(levels(factor(data$interval)))
steps<-rep (0, length(int))
for (i in seq_along(int)){
steps[i]<-mean(data$steps[data$interval==int[i]],na.rm=TRUE)
}
avday<-data.frame(int,steps)
#2
xlab<-"Number of Steps"
ylab<-"Number of days"
main<-"Number of steps per day"
hist(dailydata$steps, xlab=xlab,ylab=ylab,main=main,breaks=20)
step_mean<-format(mean(dailydata$steps,na.rm=TRUE),digits=5,nsmall=1)
step_median<-format(median(dailydata$steps,na.rm=TRUE),digits=5,nsmall=1)
#3
xlab<-"5 Minute interval"
ylab<-"Number of steps"
main<-"Average number of steps per 5 min interval"
plot(avday$int,avday$steps, type="l",xlab=xlab,ylab=ylab,main=main)
maxstep<-max(avday$steps)
maxint<-avday$int[avday$steps==maxstep]
#4
# how many missing values
miss<-sum(!complete.cases(data$steps))
# fill missing values with average data for that time interval
intmiss<-is.na(data$steps)
datafilled<-data
for (i in seq_along(intmiss)){
interval<-data$interval[i]
if (intmiss[i]){
datafilled$steps[i]<-avday$steps[avday$int==interval]
}
}
#delete unfilled data
rm(data)
#create new daily data
days<-levels(factor(datafilled$date))
steps<-rep (0, length(days))
for (i in seq_along(days)){
steps[i]<-sum(datafilled$steps[datafilled$date==days[i]])
}
fdailydata<-data.frame(days,steps)
# new histogram steps per day
xlab<-"Number of Steps"
ylab<-"Number of days"
main<-"Number of steps per day (filled data)"
hist(fdailydata$steps, xlab=xlab,ylab=ylab,main=main,breaks=20)
# new mean and median (steps per day)
fstep_mean<-format(mean(fdailydata$steps,na.rm=TRUE),digits=5,nsmall=1)
fstep_median<-format(median(fdailydata$steps,na.rm=TRUE),digits=5,nsmall=1)
#5
#create new factor variable weekday
for (i in 1:length(datafilled$date)){
actualwd<-weekdays(as.Date(datafilled$date[i]))
if (actualwd=="Saturday"|actualwd=="Sunday"){
datafilled$weekday[i]<-"weekend"
} else {
datafilled$weekday[i]<-"weekday"
}
}
datafilled$weekday<-as.factor(datafilled$weekday)
# create data for average day (weekend and weekday) with filled data
int<-as.integer(levels(factor(datafilled$interval)))
stweekday<-rep (0, length(int))
wday<-rep ("weekday", length(int))
stweekend<-rep (0, length(int))
wend<-rep ("weekend", length(int))
for (i in seq_along(int)){
stweekday[i]<-mean(datafilled$steps[datafilled$weekday=="weekday"& datafilled$interval==int[i]],na.rm=TRUE)
stweekend[i]<-mean(datafilled$steps[datafilled$weekday=="weekend"& datafilled$interval==int[i]],na.rm=TRUE)
}
favday<-data.frame(Interval=int+int,steps=stweekday+stweekend,wk=c(wday,wend))
# plot average number of steps per time interval (weekdays vs weekend)
library(lattice)
xyplot(steps~Interval|wk,favday, type="l",ylab="Number of steps")
xyplot(steps~Interval|wk,favday, type="l",ylab="Number of steps",groups=rowpos)
xyplot(steps~Interval|wk,favday, groups=rowpos,type="l",ylab="Number of steps",groups=rowpos)
xyplot(steps~Interval|*wk,favday, groups=rowpos,type="l",ylab="Number of steps",groups=rowpos)
xyplot(steps~Interval|wk,favday, groups=rowpos,type="l",ylab="Number of steps",groups=rowpos)
xyplot(steps~Interval|wk,favday, groups=rowpos,type="l",ylab="Number of steps")
xyplot(steps~Interval|wk,favday, type="l",ylab="Number of steps")
xy<-xyplot(steps~Interval|wk,favday, type="l",ylab="Number of steps")
print(xy, pos = c(0.0, 0.0, 0.5, 0.5), more = TRUE)
xy
?xyplot
?xyplot
